{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","normalCompletion","didErr","step","_e2","_defineProperty","_toConsumableArray","arr","arrayLikeToArray","from","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","path","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","data","val","defaultValue","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","defaultResult","validResult","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","includes","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext"],"mappings":"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","file":"static/js/3.8015e1bd.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}